// ----------------------------------------------------
// 1. IMPORTS E CONFIGURA√á√ÉO DE AMBIENTE
// ----------------------------------------------------
const { Client, MessageMedia, RemoteAuth } = require('whatsapp-web.js'); 
const { MongoStore } = require('wwebjs-mongo'); 
const mongoose = require('mongoose');
const qrcode = require('qrcode');
const express = require('express');
const fs = require('fs');
const path = require('path'); 

// L√™ as vari√°veis de ambiente necess√°rias
const PORT = process.env.PORT || 3000; 
const MONGO_URI = process.env.MONGODB_URI || "mongodb+srv://camiladsetec_db_user:Camila1605m@cluster0.nyiiuv1.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"; 

// ----------------------------------------------------
// 2. CONFIGURA√á√ÉO DO SERVIDOR EXPRESS (Mant√©m o Render vivo)
// ----------------------------------------------------
const app = express();

// CORRE√á√ÉO: Inicia o servidor Express imediatamente para o Health Check do Render, garantindo que seja chamado APENAS uma vez.
app.listen(PORT, () => {
    console.log(`Servidor Express iniciado e escutando na porta ${PORT}`);
});

app.get('/', (req, res) => {
    res.status(200).send('Chatbot Prisma Projeto de Dan√ßa est√° ativo e conectado ao WhatsApp e MongoDB.');
});

// ----------------------------------------------------
// 3. CONEX√ÉO COM O BANCO DE DADOS E INICIALIZA√á√ÉO DO CLIENTE
// ----------------------------------------------------

if (!MONGO_URI) {
    console.error("ERRO: A URI do MongoDB n√£o foi definida. Verifique suas vari√°veis de ambiente.");
} else {
    mongoose.connect(MONGO_URI)
        .then(() => {
            console.log('‚úÖ Conex√£o com MongoDB estabelecida com sucesso!');

            // 1. Cria a Store (Loja) do MongoDB usando a classe MongoStore
            const store = new MongoStore({
                mongoose: mongoose 
            });

            // 2. Cria o cliente com a estrat√©gia de autentica√ß√£o RemoteAuth, usando a Store
            const client = new Client({
                authStrategy: new RemoteAuth({ 
                    store: store,
                    // CORRE√á√ÉO CR√çTICA: Adiciona o intervalo m√≠nimo exigido (60 segundos)
                    backupSyncIntervalMs: 60000 
                }),
                
                // 3. Argumentos do Puppeteer (CR√çTICO para Render/ambientes headless)
                puppeteer: {
                    args: [
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-dev-shm-usage',
                        '--disable-accelerated-2d-canvas',
                        '--no-first-run',
                        '--no-zygote',
                        '--single-process', 
                    ],
                }
            });

            // Fun√ß√£o auxiliar de delay para simular digita√ß√£o e dar tempo de resposta
            const delay = ms => new Promise(res => setTimeout(res, ms));


            // 4. Listeners e inicializa√ß√£o
            client.on('qr', async qr => {
                console.log('Gerando QR Code...');
                await qrcode.toFile('qrcode.png', qr, { scale: 10 }); 
                
                console.log('‚ö†Ô∏è QR CODE DETECTADO ‚ö†Ô∏è:', qr); 
                console.log('ESCANEIE ESTE C√ìDIGO O MAIS R√ÅPIDO POSS√çVEL!');
            });

            client.on('ready', () => {
                console.log('üü¢ WhatsApp conectado com SUCESSO! Sess√£o salva no MongoDB.');
            });
            
            client.on('auth_failure', msg => {
                console.error('üî¥ Falha na autentica√ß√£o do WhatsApp. Tente escanear o QR Code novamente.', msg);
            });

            client.on('disconnected', (reason) => {
                console.log('üü° Cliente desconectado. Tentando reconectar...', reason);
            });

            client.initialize();
            

            // ----------------------------------------------------
            // 5. FUNIL DE MENSAGENS E L√ìGICA
            // ----------------------------------------------------
            client.on('message', async msg => {
                try {
                    if (!msg.body || msg.isStatus) return;
                    const isPrivateChat = msg.from.endsWith('@c.us');

                    // Fun√ß√£o auxiliar para enviar m√≠dia com verifica√ß√£o de arquivo
                    const sendMedia = async (filePath, caption) => {
                        const fullPath = path.join(__dirname, filePath);
                        if (fs.existsSync(fullPath)) {
                            const media = MessageMedia.fromFilePath(fullPath); 
                            await client.sendMessage(msg.from, media, { caption: caption });
                        } else {
                            console.error(`Arquivo n√£o encontrado: ${fullPath}`);
                            await client.sendMessage(msg.from, `Desculpe, o arquivo "${caption}" n√£o foi encontrado no servidor. Verifique a pasta 'imagens'.`);
                        }
                        await delay(2000);
                        const chat = await msg.getChat();
                        await chat.sendStateTyping();
                        await delay(2000);
                    };


                    // A. MENU PRINCIPAL (Aceita palavras-chave)
                    if (msg.body.match(/(menu|Menu|dia|tarde|noite|oi|Oi|Ol√°|ol√°|ola|Ola)/i) && isPrivateChat) {
                        const chat = await msg.getChat();
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        const contact = await msg.getContact();
                        const name = contact.pushname || 'Pessoa';
                        await client.sendMessage(msg.from, 
                            `Ol√°! ${name.split(" ")[0]}, tudo bem? Me conta como posso ajudar voc√™! Por favor, digite uma das op√ß√µes abaixo:\n\n` +
                            '1 - Como funciona\n' +
                            '2 - Valores e informa√ß√µes\n' +
                            '3 - Agendar aula experimental\n' +
                            '4 - Realizar matr√≠cula\n' +
                            '5 - Outras perguntas'
                        );
                        return;
                    }

                    // B. OP√á√ÉO 1 - Como funciona
                    if (msg.body.trim() === '1' && isPrivateChat) {
                        const chat = await msg.getChat();
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 
                            'üåü Como funciona o Prisma Projeto de Dan√ßa:\n\n' +
                            'O Prisma Projeto de Dan√ßa oferece aulas para diferentes idades e estilos.\n\n' +
                            '- Ballet: a partir de 3 anos\n' +
                            '- Jazz: a partir de 9 anos\n' +
                            '- Hip Hop: a partir de 5 anos\n\n' +
                            'Tamb√©m temos turmas para quem j√° se encontra no mundo da dan√ßa:\n' +
                            '- Dan√ßa Livre: a partir de 15 anos\n' +
                            '- Hip Hop Adulto: acima de 15 anos\n\n' +
                            'Cada modalidade √© planejada para desenvolver t√©cnica, express√£o e amor pela dan√ßa. üíú'
                        );

                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 'Digite "Menu" para voltar √†s op√ß√µes!');
                        return;
                    }

                    // C. OP√á√ÉO 2 - Valores e informa√ß√µes (Com verifica√ß√£o de arquivos)
                    if (msg.body.trim() === '2' && isPrivateChat) {
                        await delay(1000);
                        
                        // Cronograma
                        await sendMedia('imagens/Cronograma.jpg', 'Esse √© o nosso cronograma.'); 
                        
                        // Valores
                        await sendMedia('imagens/Valores.jpg', 'Esses s√£o os nossos valores.'); 

                        // Turmas
                        const texto3 = 'E essas s√£o as nossas novas turmas, abertas para matr√≠culas de novas alunas do Ballet.ü©∞';
                        await sendMedia('imagens/Turmas.jpg', texto3); 

                        await client.sendMessage(msg.from, 'Digite "Menu" para voltar √†s op√ß√µes!');
                        return;
                    }


                    // D. OP√á√ÉO 3 - Agendar aula experimental
                    if (msg.body.trim() === '3' && isPrivateChat) {
                        const chat = await msg.getChat();
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 
                            'Poderia me informar por gentileza: \n\n' +
                            '‚Ä¢ Modalidade desejada \n' +
                            '‚Ä¢ Nome completo da aluna \n' +
                            '‚Ä¢ Nome completo do repons√°vel \n' +
                            '‚Ä¢ Idade da aluna'
                        );

                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 
                            'Ap√≥s enviar essas informa√ß√µes, pe√ßo que aguarde um instante.üåü\n \n' +
                            '*Em breve, um de nossos agentes administrativos ir√° atend√™-lo com todo cuidado e aten√ß√£o.*'
                        );
                        return;
                    }

                    // E. OP√á√ÉO 4 - Realizar matr√≠cula
                    if (msg.body.trim() === '4' && isPrivateChat) {
                        const chat = await msg.getChat();
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 'Por favor, aguarde um instante. Um agente administrativo ir√° atend√™-lo em breve.üåü');
                        return;
                    }

                    // F. OP√á√ÉO 5 - Outras perguntas
                    if (msg.body.trim() === '5' && isPrivateChat) {
                        const chat = await msg.getChat();
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 
                            'Se tiver qualquer d√∫vida ou precisar de mais informa√ß√µes, estamos √† disposi√ß√£o! Voc√™ pode nos enviar uma mensagem por aqui ou visitar nosso Instagram: \n \n' +
                            'https://www.instagram.com/prismaprojetodedanca?igsh=bTNsaTZ6Znlocm5y'
                        );

                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 'Por favor, aguarde um instante. Um agente administrativo ir√° atend√™-lo em breve.üåü');
                        return;
                    }
                } catch (error) {
                    console.error("Erro ao processar mensagem:", error);
                }
            });


        })
        .catch(err => {
            console.error('üî¥ ERRO FATAL: N√£o foi poss√≠vel conectar ao MongoDB.', err);
            // CORRE√á√ÉO: Removemos a chamada app.listen daqui, pois ela j√° est√° no in√≠cio do script.
        });
}


// ----------------------------------------------------
// 6. OBSERVA√á√ÉO: A inicializa√ß√£o do Express foi movida para o topo (Linha 25)
// ----------------------------------------------------
